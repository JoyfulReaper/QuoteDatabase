// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuoteDatabase.Repository.Entities;

#nullable disable

namespace QuoteDatabase.Repository.Entities.Migrations
{
    [DbContext(typeof(QuoteDbContext))]
    partial class QuoteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuoteDatabase.Repository.Entities.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("DisplayAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuoteText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("QuoteId");

                    b.ToTable("Quotes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Quote");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuoteDatabase.Repository.Entities.Book", b =>
                {
                    b.HasBaseType("QuoteDatabase.Repository.Entities.Quote");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Chapter")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Page")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Quotes", t =>
                        {
                            t.Property("Title")
                                .HasColumnName("Book_Title");
                        });

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("QuoteDatabase.Repository.Entities.Movie", b =>
                {
                    b.HasBaseType("QuoteDatabase.Repository.Entities.Quote");

                    b.Property<string>("ActorName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("QuoteDatabase.Repository.Entities.Person", b =>
                {
                    b.HasBaseType("QuoteDatabase.Repository.Entities.Quote");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("QuoteDatabase.Repository.Entities.Song", b =>
                {
                    b.HasBaseType("QuoteDatabase.Repository.Entities.Quote");

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Track")
                        .HasColumnType("int");

                    b.ToTable("Quotes", t =>
                        {
                            t.Property("Title")
                                .HasColumnName("Song_Title");
                        });

                    b.HasDiscriminator().HasValue("Song");
                });
#pragma warning restore 612, 618
        }
    }
}
